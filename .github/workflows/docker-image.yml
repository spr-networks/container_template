name: Docker Image CI

on:
  push:
    branches: [ main, dev, cosign_test ]
  schedule:
    - cron: "0 0 1 * *"
#  workflow_run:
#    workflows: ["Bump version"]
#    types:
#      - completed
#    branches: [ main ]

jobs:

  buildx:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      -
        name: Get version from git
        run: echo "RELEASE_VERSION=$(git describe --tags --abbrev=0 | grep -Eo '[0-9]+\.[0-9]+.[0-9]+')" >> $GITHUB_ENV
      -
        name: Test release tag version
        run: echo "RELEASE_VERSION == $RELEASE_VERSION"
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Authenticate to ghcr
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      -
        name: build options
        run: echo "tags:" "*.platform=linux/amd64,linux/arm64" "tags=${RELEASE_VERSION:-latest}"

      - name: Build and push
        id: build-and-push
        uses: docker/build-push-action@v6
        env:
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
          RELEASE_CHANNEL: ${{ env.RELEASE_CHANNEL }}
        with:
          platforms: linux/amd64,linux/arm64
          provenance: false
          push: ${{ (github.event_name == 'push' && github.ref_name == 'main') }}
          tags: ghcr.io/spr-networks/container_template:${RELEASE_VERSION:-latest} , ghcr.io/spr-networks/container_template:latest
      - name: Get images from docker-compose.yml
        id: get-images
        uses: mikefarah/yq@master
        with:
          cmd: yq -o json -I 0 '[.services|.[]|.image]' docker-compose.yml
      # Install the cosign tool
      # https://github.com/sigstore/cosign-installer
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.6.0

      - name: Sign the images with GitHub OIDC Token
        env:
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
          TAGS: ${{ steps.get-images.outputs.result }}
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
          RELEASE_CHANNEL: ${{ env.RELEASE_CHANNEL }}
        run: |
          images=$(echo '${{ steps.get-images.outputs.result }}' | jq -r '.[]')
          image_list=""
          for image in $images; do
            expanded_image=$(echo "$image" | envsubst)
            image_list+="${expanded_image}@${DIGEST} "
          done
          cosign sign --yes ${image_list}

      - name: Set Matrix output
        id: set-matrix
        run: |
          echo 'name=matrix::${{ steps.get-images.outputs.result }}' >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

#  sbom:
#    name: Generate SBOMs
#    needs: buildx
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        image: ${{ fromJson(needs.build-images.outputs.matrix) }}
#    steps:
#      - name: Generate SBOM
#        uses: anchore/sbom-action@v0
#        with:
#          image: '${{ matrix.image }}'
